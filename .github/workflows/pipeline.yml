# ==============================================================================
# Workflow: NASA AMMOS Java Example
# What this does (high level):
#   1) Checks out and build the NASA AMMOS Data Cryptography Services (DCS) code.
#   2) Runs Bandit Analysis CLI to produce a SARIF report, then publishes results to the GitHub security tab.
#   3) Runs Semgrep Analysis CLI to produce a SARIF report, then publishes results to the GitHub security tab.
#   4) Lints any Dockerfiles using HADOLINT, then publishes results to the GitHub security tab.
#   5) Uses SYFT/GRYPE to create and SBOM and scan it for vulnerabilities, then publishes results to the GitHub security tab and dependency graph.
# ==============================================================================

name: AMMOS Pipeline

on:
  workflow_dispatch:

permissions:
  actions: read
  contents: write
  security-events: write

jobs:
  build: 
    name: Build DCS KMC
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (egress audit)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout repository (with submodules)
        uses: actions/checkout@1e31de5234b9f8995739874a8ce0492dc87873e2 # v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Java 17
        uses: actions/setup-java@f69f00b5e5324696b07f6b1c92f0470a6df00780 # v3
        with:
          distribution: temurin
          java-version: 17

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git cmake build-essential libgcrypt20-dev maven swig \
            libcurl4-openssl-dev libmariadb-dev libmariadb-dev-compat python3-pip curl

      - name: Install Python modules
        run: |
          pip3 install --upgrade pip
          pip3 install cffi==1.14.5 invoke==2.2.0 pycryptodome==3.20.0

      - name: Ensure JUnit and Hamcrest JARs are present
        run: |
          mkdir -p ammos-cryptolib/kmc_sdls/kmc_sdls_java/kmc_sdls_java_test
          curl -sSL -o ammos-cryptolib/kmc_sdls/kmc_sdls_java/kmc_sdls_java_test/junit-4.13.2.jar \
            https://search.maven.org/remotecontent?filepath=junit/junit/4.13.2/junit-4.13.2.jar
          curl -sSL -o ammos-cryptolib/kmc_sdls/kmc_sdls_java/kmc_sdls_java_test/hamcrest-2.2.jar \
            https://search.maven.org/remotecontent?filepath=org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar

      - name: Make build script executable
        run: chmod +x ./kmc-resources/scripts/build.sh

      - name: Run build script with skip-test
        run: ./kmc-resources/scripts/build.sh skip-test
        env:
          CMAKE_INCLUDE_PATH: /usr/include/mariadb
          CFLAGS: -Wno-address

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: dcs-kmc-build
          path: |
            **/target/*.jar
            **/crypto-lib/build/lib/*
            
  bandit:
    name: Bandit
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (egress audit)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - uses: actions/checkout@1e31de5234b9f8995739874a8ce0492dc87873e2 # v4
      - name: Bandit Scan
        uses: shundor/python-bandit-scan@ab1d87dfccc5a0ffab88be3aaac6ffe35c10d6cd
        with: # optional arguments
          # exit with 0, even with results found
          exit_zero: true # optional, default is DEFAULT
          # Github token of the repository (automatically created by Github)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information.

  semgrep:
    name: Semgrep
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (egress audit)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep (Community Rules)
        run: |
          semgrep --config=auto --json > semgrep-report.json
          semgrep --config=auto --sarif > semgrep-report.sarif
        continue-on-error: true

      - name: Upload Semgrep JSON Report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: semgrep-json-report
          path: semgrep-report.json

      - name: Upload Semgrep SARIF Report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: semgrep-sarif-report
          path: semgrep-report.sarif

      - name: Upload Semgrep SARIF to GitHub Security Tab
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3.30.3
        with:
          sarif_file: semgrep-report.sarif
        continue-on-error: true

  hadolint:
    name: Hadolint
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Harden the runner (egress audit)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@1e31de5234b9f8995739874a8ce0492dc87873e2 # v4

      - name: Install Hadolint
        run: |
          wget -qO /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x /usr/local/bin/hadolint

      - name: Run Hadolint
        run: |
          echo "Scanning all Dockerfiles..."
          find . -type f -iname 'Dockerfile*' -print0 | \
            xargs -0 -n1 hadolint --failure-threshold error \
              -f tty > hadolint-report.txt

          # Run again with SARIF output
          find . -type f -iname 'Dockerfile*' -print0 | \
            xargs -0 -n1 hadolint --failure-threshold error -f sarif \
            | jq -s '.[0]' > hadolint-report.sarif

      - name: Upload Hadolint Report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: hadolint-text-report
          path: hadolint-report.txt

      - name: Upload Hadolint SARIF to Security Dashboard
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3.30.3
        with:
          sarif_file: hadolint-report.sarif

  syft:
    name: Syft
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (egress audit)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@1e31de5234b9f8995739874a8ce0492dc87873e2 # v4

      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM (SPDX format)
        run: syft dir:. -o spdx-json > sbom.spdx.json

      - name: Upload SBOM to Dependency Graph
        uses: advanced-security/spdx-dependency-submission-action@5530bab9ee4bbe66420ce8280624036c77f89746 #v0.1.1
        with:
          spdx-path: sbom.spdx.json

      - name: Upload SBOM as Artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: sbom-spdx-json
          path: sbom.spdx.json

  grype:
    name: Grype
    runs-on: ubuntu-latest
    needs: syft
    steps:
      - name: Harden the runner (egress audit)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Download SBOM artifact
        uses: actions/download-artifact@7a1cd3216ca9260cd8022db641d960b1db4d1be4 # v4
        with:
          name: sbom-spdx-json
          path: .   # download into workspace

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan SBOM for Vulnerabilities
        run: grype sbom:sbom.spdx.json -o table > grype-report.txt

      - name: Scan SBOM for Vulnerabilities (SARIF)
        run: grype sbom:sbom.spdx.json -o sarif > grype-results.sarif

      - name: Upload Grype Reports as Artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: grype-sbom-reports
          path: | 
            grype-report.txt
            grype-results.sarif
    
      - name: Patch SARIF for GitHub Code Scanning
        run: |
          # Ensure every result has an artifactLocation.uri
          jq '
            .runs[0].results |= map(
              if .locations[0].physicalLocation.artifactLocation.uri == "" then
                .locations[0].physicalLocation.artifactLocation.uri = "/grype-dependencies"
              else .
              end
            )
          ' grype-results.sarif > grype-results-fixed.sarif

      - name: Upload Grype SARIF to Security Dashboard
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3.30.3
        with:
          sarif_file: grype-results-fixed.sarif

